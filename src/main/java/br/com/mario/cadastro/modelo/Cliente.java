package br.com.mario.cadastro.modelo;

// Generated 16/05/2015 14:37:37 by Hibernate Tools 4.3.1

import java.util.Date;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToOne;
import javax.persistence.PrimaryKeyJoinColumn;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import org.hibernate.annotations.GenericGenerator;
import org.hibernate.annotations.Parameter;
import org.hibernate.envers.AuditTable;
import org.hibernate.envers.Audited;

/**
 * Cliente generated by hbm2java
 */
@Audited
@Entity
@Table(name = "CLIENTE", catalog = "cadastro")
@AuditTable(value="CLIENTE", schema="log", catalog="cadastro")
public class Cliente implements java.io.Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = -3820301288763859568L;
	private int pesId;
	private Pessoa pessoa;
	private Vendedor vendedor;
	private Date cliDataNascimento;

	public Cliente() {
	}

	public Cliente(Pessoa pessoa, Vendedor vendedor) {
		this.pessoa = pessoa;
		this.vendedor = vendedor;
	}

	public Cliente(Pessoa pessoa, Vendedor vendedor, Date cliDataNascimento) {
		this.pessoa = pessoa;
		this.vendedor = vendedor;
		this.cliDataNascimento = cliDataNascimento;
	}

	@GenericGenerator(name = "generator", strategy = "foreign", parameters = @Parameter(name = "property", value = "pessoa"))
	@Id
	@GeneratedValue(generator = "generator")
	@Column(name = "PES_ID", unique = true, nullable = false)
	public int getPesId() {
		return this.pesId;
	}

	public void setPesId(int pesId) {
		this.pesId = pesId;
	}

	@OneToOne(fetch = FetchType.LAZY)
	@PrimaryKeyJoinColumn
	public Pessoa getPessoa() {
		return this.pessoa;
	}

	public void setPessoa(Pessoa pessoa) {
		this.pessoa = pessoa;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "VEN_PES_ID", nullable = false)
	public Vendedor getVendedor() {
		return this.vendedor;
	}

	public void setVendedor(Vendedor vendedor) {
		this.vendedor = vendedor;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "CLI_DATA_NASCIMENTO", length = 23)
	public Date getCliDataNascimento() {
		return this.cliDataNascimento;
	}

	public void setCliDataNascimento(Date cliDataNascimento) {
		this.cliDataNascimento = cliDataNascimento;
	}

	public static long getSerialversionuid() {
		return serialVersionUID;
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime
				* result
				+ ((cliDataNascimento == null) ? 0 : cliDataNascimento
						.hashCode());
		result = prime * result + pesId;
		result = prime * result + ((pessoa == null) ? 0 : pessoa.hashCode());
		result = prime * result
				+ ((vendedor == null) ? 0 : vendedor.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Cliente other = (Cliente) obj;
		if (cliDataNascimento == null) {
			if (other.cliDataNascimento != null)
				return false;
		} else if (!cliDataNascimento.equals(other.cliDataNascimento))
			return false;
		if (pesId != other.pesId)
			return false;
		if (pessoa == null) {
			if (other.pessoa != null)
				return false;
		} else if (!pessoa.equals(other.pessoa))
			return false;
		if (vendedor == null) {
			if (other.vendedor != null)
				return false;
		} else if (!vendedor.equals(other.vendedor))
			return false;
		return true;
	}

	@Override
	public String toString() {
		return "Cliente [pesId=" + pesId + "]";
	}

}
